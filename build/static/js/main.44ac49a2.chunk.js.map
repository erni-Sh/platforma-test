{"version":3,"sources":["redux/reducers/filterReducer.js","redux/store/store.jsx","components/app-header/app-header.jsx","components/filter-form/filter-form.jsx","redux/actions/filterActions.js","components/filter-color/filter-color.jsx","components/list-view/list-view.jsx","App.js","serviceWorker.js","index.js"],"names":["defaultState","forms","colors","brightness","columns","reducers","filters","state","action","type","payload","rootReducer","combineReducers","setupStore","configureStore","reducer","AppHeader","FilterForm","dispatch","useDispatch","changeCheckbox","checkedForms","document","querySelectorAll","forEach","box","push","value","className","id","name","onChange","defaultChecked","htmlFor","FilterColor","useState","visible","setVisible","changeCheckboxColor","checkedColors","changeBrightness","checkedBrightness","placeholder","max","min","checkedBoxes","querySelector","Number","ListView","figuresData","setFiguresData","useEffect","axios","get","then","resp","data","activeFilters","useSelector","map","figure","includes","form","color","dark","key","nanoid","style","width","maxWidth","backgroundColor","filter","App","Boolean","window","location","hostname","match","store","innerApp","StrictMode","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iVAAMA,EAAe,CACpBC,MAAO,CAAC,SAAU,UAClBC,OAAQ,CAAC,MAAO,QAAS,OAAQ,UACjCC,WAAY,CAAC,IACbC,QAAS,GCAJC,EAAW,CAChBC,QDE4B,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCACtDC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACP,IAAK,sBACJ,OAAO,2BAAIF,GAAX,IAAkBN,MAAOS,IAC1B,IAAK,sBACJ,OAAO,2BAAIH,GAAX,IAAkBL,OAAQQ,IAC3B,IAAK,2BACJ,OAAO,2BAAIH,GAAX,IAAkBJ,WAAYO,IAC/B,IAAK,wBACJ,OAAO,2BAAIH,GAAX,IAAkBH,QAASM,IAC5B,QACC,OAAOH,KCZJI,EAAcC,YAAgB,eAChCP,IAQWQ,EALI,kBAClBC,YAAe,CACdC,QAASJ,K,MCZI,SAASK,IACvB,OACC,6H,YCGa,SAASC,IACvB,IAAMC,EAAWC,cAEXC,EAAiB,WACtB,IAAMC,EAAe,GACAC,SAASC,iBAAiB,4BAClCC,SAAQ,SAACC,GAAD,OAASJ,EAAaK,KAAKD,EAAIE,UACpDT,ECNmD,CAACT,KAL1B,sBAKqDC,QDM9CW,KAGlC,OACC,yBAAKO,UAAU,eACd,yBAAKA,UAAW,+CACf,2BAAOnB,KAAM,WAAYoB,GAAI,SAAUF,MAAO,SAAUG,KAAM,OAAQC,SAAUX,EAAgBY,gBAAc,IAC9G,2BAAOC,QAAS,UAAhB,mCAED,yBAAKL,UAAW,+CACf,2BAAOnB,KAAM,WAAYoB,GAAI,SAAUF,MAAO,SAAUG,KAAM,OAAQC,SAAUX,EAAgBY,gBAAc,IAC9G,2BAAOC,QAAS,UAAhB,sD,iBElBW,SAASC,IACvB,MAAgCC,oBAAS,GAAzC,mBAAQC,EAAR,KAAiBC,EAAjB,KACMnB,EAAWC,cAEXmB,EAAsB,WAC3B,IAAMC,EAAgB,GACDjB,SAASC,iBAAiB,6BAClCC,SAAQ,SAACC,GAAD,OAASc,EAAcb,KAAKD,EAAIE,UACrDT,EDToD,CAACT,KAL3B,sBAKsDC,QCS9C6B,KAG7BC,EAAmB,WACxB,IAAMC,EAAoB,GACLnB,SAASC,iBAAiB,kCAClCC,SAAQ,SAACC,GAAD,OAASgB,EAAkBf,KAAKD,EAAIE,UACzDT,EDfwD,CAACT,KAL1B,2BAK0DC,QCenD+B,KAQvC,OACC,oCACC,yBAAKb,UAAW,2BACf,2BAAOnB,KAAK,WAAWqB,KAAK,GAAGD,GAAG,GAAGE,SAAU,kBAAKM,GAAYD,MAChE,yBAAKR,UAAU,mBACd,0BAAMA,UAAU,eAChB,0BAAMA,UAAU,eAChB,0BAAMA,UAAU,iBAKlB,yBAAKA,UAAS,wBAAmBQ,EAAU,wBAA0B,KACpE,yBAAKR,UAAW,wBACf,yBAAKA,UAAW,oBACf,2BAAOnB,KAAM,WAAYoB,GAAI,MAAOF,MAAO,MAAOG,KAAM,QAASC,SAAUO,EAAqBN,gBAAc,IAC9G,2BAAOC,QAAS,OAAhB,+CAED,yBAAKL,UAAW,oBACf,2BAAOnB,KAAM,WAAYoB,GAAI,QAASF,MAAO,QAASG,KAAM,QAASC,SAAUO,EAAqBN,gBAAc,IAClH,2BAAOC,QAAS,SAAhB,+CAED,yBAAKL,UAAW,oBACf,2BAAOnB,KAAM,WAAYoB,GAAI,OAAQF,MAAO,OAAQG,KAAM,QAASC,SAAUO,EAAqBN,gBAAc,IAChH,2BAAOC,QAAS,QAAhB,mCAED,yBAAKL,UAAW,oBACf,2BAAOnB,KAAM,WAAYoB,GAAI,SAAUF,MAAO,SAAUG,KAAM,QAASC,SAAUO,EAAqBN,gBAAc,IACpH,2BAAOC,QAAS,UAAhB,0CAIF,yBAAKL,UAAW,wBACf,6BACC,2BAAOnB,KAAM,QAASoB,GAAI,MAAOF,MAAO,GAAIG,KAAM,aAAcC,SAAUS,EAAkBR,gBAAc,IAC1G,2BAAOC,QAAS,OAAhB,uBAED,6BACC,2BAAOxB,KAAM,QAASoB,GAAI,OAAQF,MAAO,OAAQG,KAAM,aAAcC,SAAUS,IAC/E,2BAAOP,QAAS,QAAhB,yCAED,6BACC,2BAAOxB,KAAM,QAASoB,GAAI,QAASF,MAAO,QAASG,KAAM,aAAcC,SAAUS,IACjF,2BAAOP,QAAS,SAAhB,gDAIF,yBAAKL,UAAW,wBACf,2BAAOK,QAAS,WAAhB,8CACA,2BAAOxB,KAAM,SAAUoB,GAAI,UAAWa,YAAa,EAAGC,IAAK,EAAGC,IAAK,EAAGd,KAAM,UAAWC,SAtDrE,WACrB,IAAMc,EAAevB,SAASwB,cAAc,uBAC5C5B,EDtBqD,CAACT,KAL1B,wBAKuDC,QCsBhDqC,OAAOF,EAAalB,e,mCCrB1C,SAASqB,IACvB,MAAsCb,qBAAtC,mBAAOc,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WAETC,IAAMC,IADS,6DACGC,MAAK,SAACC,GACvBL,EAAeK,EAAKC,WAEnB,CAACN,IAEJ,IAAMO,EAAgBC,aAAY,SAAAnD,GAAK,OAAIA,EAAMD,WAEjD,OACC,yBAAKsB,UAAU,aAAf,OACEqB,QADF,IACEA,OADF,EACEA,EAAaU,KAAI,SAACC,GAClB,QAAIH,EAAcxD,MAAM4D,SAASD,EAAOE,UACpCL,EAAcvD,OAAO2D,SAASD,EAAOG,WACtCN,EAActD,WAAW0D,SAAS,UAAYD,EAAOI,UACrDP,EAActD,WAAW0D,SAAS,WAAYD,EAAOI,OAGvD,yBAAKC,IAAKC,cAAUC,MAAO,CAACC,MAAM,GAAD,OAAK,IAAMX,EAAcrD,QAAzB,OAChC,yBAAKwB,UAAS,iBAAYgC,EAAOE,MAAQK,MAAO,CAC/CE,SAAU,QACVC,gBAAiBV,EAAOG,MACxBQ,OAAO,GAAD,OAAIX,EAAOI,KAAO,kBAAoB,8BCbpCQ,MAXf,WACE,OACE,yBAAK5C,UAAW,aACd,kBAACZ,EAAD,MACA,kBAACkB,EAAD,MACA,kBAACjB,EAAD,MACA,kBAAC+B,EAAD,QCDcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQjE,IAERkE,EACL,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUF,MAAOA,GAChB,kBAAC,EAAD,QAKHG,IAASC,OACRH,EACAzD,SAAS6D,eAAe,SD2GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.44ac49a2.chunk.js","sourcesContent":["const defaultState = {\r\n\tforms: ['circle', 'square'],\r\n\tcolors: ['red', 'green', 'blue', 'yellow'],\r\n\tbrightness: [\"\"],\r\n\tcolumns: 4,\r\n};\r\n\r\nexport const filterReducer = (state = defaultState, action) => {\r\n\tconst { type, payload } = action;\r\n\r\n\tswitch (type) {\r\n\t\tcase 'CHANGE_FORMS_FILTER':\r\n\t\t\treturn {...state, forms: payload};;\r\n\t\tcase 'CHANGE_COLOR_FILTER':\r\n\t\t\treturn {...state, colors: payload};\r\n\t\tcase 'CHANGE_BRIGHTNESS_FILTER':\r\n\t\t\treturn {...state, brightness: payload};\r\n\t\tcase 'CHANGE_COLUMNS_FILTER':\r\n\t\t\treturn {...state, columns: payload};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\n\r\nimport { filterReducer } from \"../reducers/filterReducer\";\r\n\r\nconst reducers = {\r\n\tfilters: filterReducer\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n\t...reducers,\r\n});\r\n\r\nconst setupStore = () =>\r\n\tconfigureStore({\r\n\t\treducer: rootReducer,\r\n\t});\r\n\r\nexport default setupStore;\r\n","import React from 'react';\r\n\r\nexport default function AppHeader() {\r\n\treturn (\r\n\t\t<h1>Круги и квадраты, v.1.0</h1>\r\n\t)\r\n}\r\n","import React from 'react';\r\nimport '../../styles/checkboxes.scss';\r\nimport '../../styles/filter-form.scss';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeFormsFilterAction } from \"../../redux/actions/filterActions\";\r\n\r\nexport default function FilterForm() {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst changeCheckbox = () => {\r\n\t\tconst checkedForms = [];\r\n\t\tconst checkedBoxes = document.querySelectorAll('input[name=form]:checked');\r\n\t\tcheckedBoxes.forEach((box) => checkedForms.push(box.value));\r\n\t\tdispatch(changeFormsFilterAction(checkedForms));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"filter-form\">\r\n\t\t\t<div className={\"filter-form__input-wrapper checkbox-wrapper\"} >\r\n\t\t\t\t<input type={\"checkbox\"} id={\"circle\"} value={\"circle\"} name={\"form\"} onChange={changeCheckbox} defaultChecked/>\r\n\t\t\t\t<label htmlFor={\"circle\"}>Круги</label>\r\n\t\t\t</div>\r\n\t\t\t<div className={\"filter-form__input-wrapper checkbox-wrapper\"} >\r\n\t\t\t\t<input type={\"checkbox\"} id={\"square\"} value={\"square\"} name={\"form\"} onChange={changeCheckbox} defaultChecked/>\r\n\t\t\t\t<label htmlFor={\"square\"}>Квадраты</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","const CHANGE_COLUMNS_FILTER = 'CHANGE_COLUMNS_FILTER';\r\nconst CHANGE_COLOR_FILTER = 'CHANGE_COLOR_FILTER';\r\nconst CHANGE_BRIGHTNESS_FILTER = 'CHANGE_BRIGHTNESS_FILTER';\r\nconst CHANGE_FORMS_FILTER = 'CHANGE_FORMS_FILTER';\r\n\r\nexport const changeColumnsFilterAction = (payload) => ({type: CHANGE_COLUMNS_FILTER, payload});\r\nexport const changeColorsFilterAction = (payload) => ({type: CHANGE_COLOR_FILTER, payload});\r\nexport const changeBrightnessFilterAction = (payload) => ({type: CHANGE_BRIGHTNESS_FILTER, payload});\r\nexport const changeFormsFilterAction = (payload) => ({type: CHANGE_FORMS_FILTER, payload});\r\n","import React, { useState } from 'react';\r\nimport '../../styles/checkboxes.scss';\r\nimport '../../styles/filter-colors.scss'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeColorsFilterAction, changeBrightnessFilterAction, changeColumnsFilterAction } from \"../../redux/actions/filterActions\";\r\n\r\nexport default function FilterColor() {\r\n\tconst [ visible, setVisible ] = useState(false);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst changeCheckboxColor = () => {\r\n\t\tconst checkedColors = [];\r\n\t\tconst checkedBoxes = document.querySelectorAll('input[name=color]:checked');\r\n\t\tcheckedBoxes.forEach((box) => checkedColors.push(box.value));\r\n\t\tdispatch(changeColorsFilterAction(checkedColors));\r\n\t}\r\n\r\n\tconst changeBrightness = () => {\r\n\t\tconst checkedBrightness = [];\r\n\t\tconst checkedBoxes = document.querySelectorAll('input[name=brightness]:checked');\r\n\t\tcheckedBoxes.forEach((box) => checkedBrightness.push(box.value));\r\n\t\tdispatch(changeBrightnessFilterAction(checkedBrightness));\r\n\t}\r\n\r\n\tconst changeColumns = () => {\r\n\t\tconst checkedBoxes = document.querySelector('input[name=columns]');\r\n\t\tdispatch(changeColumnsFilterAction(Number(checkedBoxes.value)));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={\"filter-color__gamburger\"}>\r\n\t\t\t\t<input type=\"checkbox\" name=\"\" id=\"\" onChange={()=> setVisible(!visible)}/>\r\n\t\t\t\t<div className=\"hamburger-lines\">\r\n\t\t\t\t\t<span className=\"line line1\"></span>\r\n\t\t\t\t\t<span className=\"line line2\"></span>\r\n\t\t\t\t\t<span className=\"line line3\"></span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t\t<div className={`filter-colors ${visible ? \"filter-colors_visible\" : \"\"}`}>\r\n\t\t\t\t<div className={\"filter-colors__block\"}>\r\n\t\t\t\t\t<div className={\"checkbox-wrapper\"} >\r\n\t\t\t\t\t\t<input type={\"checkbox\"} id={\"red\"} value={\"red\"} name={\"color\"} onChange={changeCheckboxColor} defaultChecked />\r\n\t\t\t\t\t\t<label htmlFor={\"red\"}>Красные</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={\"checkbox-wrapper\"} >\r\n\t\t\t\t\t\t<input type={\"checkbox\"} id={\"green\"} value={\"green\"} name={\"color\"} onChange={changeCheckboxColor} defaultChecked/>\r\n\t\t\t\t\t\t<label htmlFor={\"green\"}>Зеленые</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={\"checkbox-wrapper\"} >\r\n\t\t\t\t\t\t<input type={\"checkbox\"} id={\"blue\"} value={\"blue\"} name={\"color\"} onChange={changeCheckboxColor} defaultChecked/>\r\n\t\t\t\t\t\t<label htmlFor={\"blue\"}>Синие</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={\"checkbox-wrapper\"} >\r\n\t\t\t\t\t\t<input type={\"checkbox\"} id={\"yellow\"} value={\"yellow\"} name={\"color\"} onChange={changeCheckboxColor} defaultChecked/>\r\n\t\t\t\t\t\t<label htmlFor={\"yellow\"}>Желтые</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"filter-colors__block\"}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input type={\"radio\"} id={\"all\"} value={\"\"} name={\"brightness\"} onChange={changeBrightness} defaultChecked />\r\n\t\t\t\t\t\t<label htmlFor={\"all\"}>Все</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input type={\"radio\"} id={\"dark\"} value={\"dark\"} name={\"brightness\"} onChange={changeBrightness} />\r\n\t\t\t\t\t\t<label htmlFor={\"dark\"}>тёмные</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input type={\"radio\"} id={\"light\"} value={\"light\"} name={\"brightness\"} onChange={changeBrightness} />\r\n\t\t\t\t\t\t<label htmlFor={\"light\"}>светлые</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"filter-colors__block\"}>\r\n\t\t\t\t\t<label htmlFor={\"columns\"}>Колонки</label>\r\n\t\t\t\t\t<input type={\"number\"} id={\"columns\"} placeholder={4} max={4} min={1} name={\"columns\"} onChange={changeColumns}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { nanoid } from 'nanoid';\r\nimport {useSelector} from \"react-redux\";\r\nimport '../../styles/list-view.scss';\r\n\r\nexport default function ListView() {\r\n\tconst [figuresData, setFiguresData] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst apiUrl = 'https://erni-sh.github.io/platforma-test/public/data.json';\r\n\t\taxios.get(apiUrl).then((resp) => {\r\n\t\t\tsetFiguresData(resp.data);\r\n\t\t});\r\n\t}, [setFiguresData]);\r\n\r\n\tconst activeFilters = useSelector(state => state.filters);\r\n\r\n\treturn (\r\n\t\t<div className=\"list_view\">\r\n\t\t\t{figuresData?.map((figure) => {\r\n\t\t\t\tif(!activeFilters.forms.includes(figure.form)) return false;\r\n\t\t\t\tif(!activeFilters.colors.includes(figure.color)) return false;\r\n\t\t\t\tif(activeFilters.brightness.includes('dark') && !figure.dark) return false;\r\n\t\t\t\tif(activeFilters.brightness.includes('light') && figure.dark) return false;\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div key={nanoid()} style={{width: `${100 / activeFilters.columns}%` }}>\r\n\t\t\t\t\t\t<div className={`figure ${figure.form}`} style={{\r\n\t\t\t\t\t\t\tmaxWidth: '100px',\r\n\t\t\t\t\t\t\tbackgroundColor: figure.color,\r\n\t\t\t\t\t\t\tfilter:`${figure.dark ? 'brightness(50%)' : 'brightness(85%)'}`\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react';\n\nimport AppHeader from './components/app-header/app-header';\nimport FilterForm from './components/filter-form/filter-form';\nimport FilterColor from './components/filter-color/filter-color';\nimport ListView from './components/list-view/list-view';\n\nfunction App() {\n  return (\n    <div className={\"container\"}>\n      <AppHeader />\n      <FilterColor />\n      <FilterForm />\n      <ListView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from \"react-redux\";\nimport setupStore from \"./redux/store/store\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = setupStore();\n\nconst innerApp = (\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>\n)\n\nReactDOM.render(\n\tinnerApp,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}